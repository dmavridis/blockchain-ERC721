// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier



// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SolnSquareVerifier = artifacts.require('SolnSquareVerifier');
var Verifier = artifacts.require('Verifier');


// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('TestSolnSquareVerifier', accounts => {
    const account_one = accounts[0];
    const account_two = accounts[1];
    const account_three = accounts[2];

    const { proof, input } = require('../../zokrates/code/square/proof.json')
    const { proof_err, input_err } = require('../../zokrates/code/square/proof-err.json')


    describe('Mint with square verifier', function () {
        beforeEach(async function () { 
            this.verifier = await Verifier.new({from: account_one})
            this.contract = await SolnSquareVerifier.new(this.verifier.address, {from: account_one});
        })

        it('Verifying minting', async function () { 
            await this.contract.mintNFT
                                (
                                    account_two,
                                    202,
                                    proof.A,
                                    proof.A_p,
                                    proof.B,
                                    proof.B_p,
                                    proof.C,
                                    proof.C_p,
                                    proof.H,
                                    proof.K,
                                    input
                               );
            let balance = await this.contract.balanceOf(account_two)
            assert.equal(balance, 1, 'Incorrect Balance')
        })


        it('Should fail when minting without verifying', async function () {
            await expectThrow(this.contract.mintNFT
                                (
                                    account_three,
                                    302,
                                    proof_err.A,
                                    proof_err.A_p,
                                    proof_err.B,
                                    proof_err.B_p,
                                    proof_err.C,
                                    proof_err.C_p,
                                    proof_err.H,
                                    proof_err.K,
                                    input_err
                               )
            )
        })
    })
})

var expectThrow = async function(promise) { 
    try { 
        await promise
    } catch (error) { 
        assert.exists(error)
        return
    }

    assert.fail('Expected an error but didnt see one!')
}